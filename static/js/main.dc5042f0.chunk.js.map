{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","request","data","results","fetchData","className","map","movie","key","id","src","poster_path","backdrop_path","alt","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","get","Math","floor","random","length","console","table","style","backgroundSize","backgroundImage","backgroundPosition","name","original_name","overview","substr","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc5042f0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// base url to make request to the movie database\r\nconst instance = axios.create({\r\n  baseURL: \"http://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    //if [],run once when the row loads, and dont run again\r\n    async function fetchData() {\r\n      const request = await axios(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {/*several row_posters*/}\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`}\r\n            alt={movie.title}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"8bf279c9e616445b0126d9f6c99e5113\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React,{useState,useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner(){\r\n    const [movie,setMovie]= useState([])\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[Math.floor(Math.random()*request.data.results.length-1)]\r\n            )\r\n        }\r\n        fetchData();\r\n    },[])\r\n        console.table(movie)\r\n        function truncate(str,n){\r\n            return str?.length>n?str.substr(0,n-1)+\"...\":str;\r\n        }\r\n    return(\r\n        <header className=\"banner\"\r\n        style={\r\n            {backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"http://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition:\"center center\",}\r\n        }>\r\n            <div className=\"banner__contents\">\r\n            <h1 className=\"banner__title\">\r\n                {movie?.title||movie?.name||movie?.original_name}\r\n            </h1>\r\n            <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\">Play</button>\r\n                <button className=\"banner__button\">My list</button>\r\n            </div>\r\n            <h1 className=\"banner__description\">{truncate(movie?.overview,150)}</h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Row from \"./Row\";\r\nimport requests from \"./requests\";\r\nimport Banner from \"./Banner\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Banner />\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n        \r\n      />\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}